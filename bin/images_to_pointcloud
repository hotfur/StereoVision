"""
Tool for creating and exporting colored point clouds from stereo image pairs
and calculate distance from object to camera.
"""
import argparse
import numpy as np
from sklearn.cluster import *
import cv2
from stereovision.blockmatchers import StereoBM, StereoSGBM
from stereovision.calibration import StereoCalibration
from stereovision.stereo_cameras import CalibratedPair
from stereovision.ui_utils import STEREO_BM_FLAG

# Threshold to print impact message
threshold = 6


def main():
    """Produce PLY point clouds from stereo image pair."""
    parser = argparse.ArgumentParser(description="Read images taken with "
                                                 "stereo pair and use them to produce 3D "
                                                 "point clouds that can be viewed with "
                                                 "MeshLab.", parents=[STEREO_BM_FLAG])
    parser.add_argument("calibration", help="Path to calibration folder.")
    parser.add_argument("left", help="Path to left image")
    parser.add_argument("right", help="Path to right image")
    parser.add_argument("output", help="Path to output file.")
    parser.add_argument("--bm_settings",
                        help="Path to block matcher's settings.")
    args = parser.parse_args()

    image_pair = [cv2.imread(image) for image in [args.left, args.right]]
    calib_folder = args.calibration
    if args.use_stereobm:
        block_matcher = StereoBM()
    else:
        block_matcher = StereoSGBM()
    if args.bm_settings:
        block_matcher.load_settings(args.bm_settings)

    camera_pair = CalibratedPair(None,
                                 StereoCalibration(input_folder=calib_folder),
                                 block_matcher)
    rectified_pair = camera_pair.calibration.rectify(image_pair)
    disparity, points = camera_pair.get_point_cloud(rectified_pair)
    points = points.filter_infinity()
    # Get distance from points cloud
    X = points.coordinates
    # DBSCAN to group points to objects
    objects = dbscan(X=X, min_samples=X.shape[0] // 1000, n_jobs=-1)
    # Take the median of classified points to identify the largest object in the scene
    median = int(np.median(objects[1]))
    # Calculate distance from object to camera
    distance = np.square(X[objects[1] == median])
    distance = np.sqrt(np.sum(distance, axis=1))
    distance = np.sum(distance) / len(distance)
    # Add warning if distance exceed threshold
    if distance < threshold:
        print("Impact Alarm! Object is only " + str(distance) + " from camera")
    else:
        print("Object is " + str(distance) + " from camera")
    points.write_ply(args.output)
    cv2.imwrite("map.jpg", disparity)


if __name__ == "__main__":
    main()
